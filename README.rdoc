== CryptoGost3410

Ruby library implementing GOST 34.10-2012 ECC signature and VKO algorithms.
Forked from https://github.com/wilddima/crypto_gost.

=== Installation

Add this line to your application's Gemfile:

  gem 'crypto_gost3410'

And then execute:

  $ bundle

Or install it yourself as:

  $ gem install crypto_gost3410

Or install it locally from source crypto_gost3410 project directory

  $ bundle exec rake install
  
=== Usage

  # All input and output data for CryptoGost3410 are big numbers only, not byte arrays nor strings.
  # As so, input CryptoGost3411 message digest should be converted to big number too.
  # We removed SecureRandom random number generations out of module to use any external generator.
  # In version 0.2.0 tests we use crypto_gost3411 gem instead of stribog gem for digest generation.  

  require 'securerandom'
  require 'crypto_gost3411'
  require 'crypto_gost3410'

  group = CryptoGost3410::Group::Gost256tc26a
  puts group.opts[:name]
  puts group.opts[:id]
  puts group.opts[:oid]
  if group.opts[:name].start_with?("Gost512") then
    size = 512
    unpack_format = 'Q*'
  else 
    size = 256 
    unpack_format = 'L*'
  end
 
  generator = CryptoGost3410::Generator.new(group)  # for sign and for vko
  verifier = CryptoGost3410::Verifier.new(group)    # for verify
  
  # private_key is random number 0<n<group.order
  # you can use fixed number for debugging
  private_key = SecureRandom.random_number(1..group.order-1) 
  puts "private_key: #{private_key.to_s(16)}"

  public_key = group.generate_public_key private_key
  puts "public_key.x: #{public_key.x.to_s(16)}"
  puts "public_key.y: #{public_key.y.to_s(16)}"

  # Signature:
  
  message = 'ruby'
  digest = CryptoCost3411::Gost3411.new(size/8).update(message).final
  puts "digest: #{digest.to_s(16)}"
  digest_num = digest.unpack(unpack_format)[0]

  # rnd_val is random number 0<n<group.order so as private_key
  # you can use fixed number for debugging
  rand_val = SecureRandom.random_number(1..group.order-1)
  puts "rand_val: #{rand_val.to_s(16)}"
  
  signature = generator.sign(digest_num, private_key, rand_val)
  puts "signature.x: #{signature.x.to_s(16)}"   # x stands for r
  puts "signature.y: #{signature.y.to_s(16)}"   # y stands for s

  signature_ok = verifier.new(group).verify(digest, public_key, signature)
  puts "signature_ok: #{signature_ok}"

  # VKO:
  
  receiver_private_key = SecureRandom.random_number(1..group.order-1) 
  puts "receiver_private_key: #{receiver_private_key.to_s(16)}"

  receiver_public_key = group.generate_public_key receiver_private_key
  puts "receiver_public_key.x: #{receiver_public_key.x.to_s(16)}"
  puts "receiver_public_key.y: #{receiver_public_key.y.to_s(16)}"

  # ukm is random number 2**64<=ukm<2**256
  # we use fixed number for debugging
  ukm = SecureRandom.random_number(2**64..2**256)
  puts "ukm: #{ukm.to_s(16)}"
  
  sender_vko = generator.vko(ukm, private_key, receiver_public_key)
  puts "sender_vko.x: #{sender_vko.x.to_s(16)}"
  puts "sender_vko.y: #{sender_vko.y.to_s(16)}"

  receiver_vko = generator.vko(ukm, receiver_private_key, public_key)
  puts "receiver_vko.x: #{receiver_vko.x.to_s(16)}"
  puts "receiver_vko.y: #{receiver_vko.y.to_s(16)}"

  puts "vko_ok: #{(sender_vko.x == receiver_vko.x) && (sender_vko.y == receiver_vko.y)}"
  
=== List of TC 26 GOST 34.10-2012 elliptic curves:

  Gost256tc26test - id-tc26-gost-3410-2012-256-paramSetTest (former id-GostR3410-2001-TestParamSet). Use for testing only!
  Gost256tc26a    - id-tc26-gost-3410-2012-256-paramSetA
  Gost256tc26b    - id-tc26-gost-3410-2012-256-paramSetA (former id-GostR3410-2001-CryptoPro-A-ParamSet)
  Gost256tc26c    - id-tc26-gost-3410-2012-256-paramSetC (former id-GostR3410-2001-CryptoPro-B-ParamSet)
  Gost256tc26d    - id-tc26-gost-3410-2012-256-paramSetD (former id-GostR3410-2001-CryptoPro-C-ParamSet)
  Gost512test     - id-tc26-gost-3410-2012-512-paramSetTest. Use for testing only!
  Gost512tc26a    - id-tc26-gost-3410-2012-512-paramSetA
  Gost512tc26b    - id-tc26-gost-3410-2012-512-paramSetB
  Gost512tc26c    - id-tc26-gost-3410-2012-512-paramSetC
  
=== Testing

Run spec test from crypto_gost3410 source project directory:
 
$ bundle exec rake spec
 
=== Thanks

Thanks to WildDima for root crypto_gost project on GitHub at https://github.com/wilddima/crypto_gost.

=== Contributing

Bug reports and pull requests are welcome on GitHub at https://github.com/vblazhnovgit/crypto_gost3410. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.


=== License

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).
